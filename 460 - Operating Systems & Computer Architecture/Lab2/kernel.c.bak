PROC *kfork();

int geti()
{
  char s[16];
  return atoi(gets(s));
}

int do_tswitch()
{
  printf("KillMod %d tswitch()\n", running->pid);
  tswitch();
  printf("KillMod %d resumes\n", running->pid);
}

int do_kfork()
{
  PROC *p;
  printf("KillMod%d kfork a child\n", running->pid);
  p = kfork();
  if (p==0)
     printf("kfork failed\n");
  else
     printf("child pid = %d\n", p->pid);
}

int do_sleep()
{
  int event;
  printf("input a value to sleep on : ");
  event = geti();
  printf("KillMod %d going to sleep on %d\n", running->pid, event);
  ksleep(event);
  printf("KillMod %d resume after sleep\n");
}

int do_wakeup()
{
  int event;
  printf("enter a event value to wakeup : ");
  event = geti();
  kwakeup(event);
}

int do_exit()
{
  int exitValue;
  if (running->pid == 1 && nproc > 2){
      printf("other killMods still exist, P1 can't die yet !%c\n",007);
      return -1;
  }
  printf("enter an exitValue : ");
  exitValue = geti();
  printf("%d\n", exitValue);
  kexit(exitValue);
}

int do_wait()
{
  int child, status;
  child = kwait(&status);
  if (child<0){
    printf("KillMod %d wait error : no child\n", running->pid);
    return -1;
  }
  printf("KillMod %d found a ZOMBIE child %d exitValue=%d\n", 
	   running->pid, child, status);
  return child;
}

int body()
{
  char c;
  printf("proc %d resumes to body()\n", running->pid);
  while(1){
    printf("-----------------------------------------\n");
    printf("Freelist\n");
    printQueue(freeList);
    printf("ReadyQueue\n");
    printQueue(readyQueue);
    printf("Sleeplist\n");
    printQueue(sleepList);
    printf("-----------------------------------------\n");

    printf("KillMod %d[%d] running: parent=%d\n",
	   running->pid, running->priority, running->ppid);

    printf("enter a command [s|q|f|z|a|w] : "); // z=sleep a=wakeup w=wait 
    c = getc(); printf("%c\n", c);

    switch(c){
       case 's' : do_tswitch();   break;
       case 'f' : do_kfork();     break;
       case 'q' : do_exit();      break;
       case 'z' : do_sleep();     break;
       case 'a' : do_wakeup();    break;
       case 'w' : do_wait();      break;
    }
  }
}

PROC *kfork()
{
  int i;
  
  PROC *p = get_proc();
  printf("--- FORK ---\n");
  if (p)
  {
    p->status = READY;
    p->ppid = running->pid;
    p->priority = 1;
    p->next = 0;
    
    for (i=1;i<10;++i)
    {
      p->kstack[SSIZE - i] = 0;
    }
    
    p->ksp =  &p->kstack[SSIZE - 9];
    p->kstack[SSIZE - 9] = (int)body;
    
    printf("readyQ -");
    enqueue( &readyQueue, p);
    nproc++;
    
    printf("[%d] Forked pid[%d] procs[%d]\n\n", running->pid,p->pid, nproc); 
    printf("ReadyQueue is:[%d]\n", readyQueue->pid);
    return p;
  }else
  {
    printf("No Mo Procs\n");
    return 0;
  }
  
}